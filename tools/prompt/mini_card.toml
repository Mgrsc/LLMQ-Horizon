mini_card = '''# 终极、圆润紧凑风格的知识密集型 SVG 卡片生成器

**目标：**  作为一位在视觉设计和信息呈现方面具有卓越洞察力的专家，你的目标是构建一个极其详尽且可配置的提示词，用于指导 LLM 生成具有**圆润风格**和**紧凑排版比例**的高度定制化、信息结构复杂、视觉语言丰富的知识密集型 SVG 卡片。此提示词旨在覆盖从宏观布局到微观样式的所有方面，并允许用户通过详细的参数配置生成满足特定需求的卡片。

**核心原则：**

- **精确性：**  使用明确、具体的语言描述每个要求和参数。
- **结构化：**  将提示词组织成清晰的层次结构，方便理解和修改。
- **可配置性：**  为关键属性提供可配置的参数，允许用户自定义卡片的各个方面。
- **圆润风格：**  卡片整体及内部元素应呈现柔和的圆角效果。
- **排版紧凑：**  在保证信息可读性的前提下，最大程度地利用卡片空间，减少留白，使内容排布紧密。
- **灵活性：**  虽然详细，但也要允许 LLM 在某些方面进行合理的自由发挥，尤其是在创意性的视觉呈现上。

**I. 卡片元数据配置**

```json
{
  "cardName": "[卡片名称，用于标识]",
  "description": "[卡片用途和描述]",
  "version": "[版本号]",
  "author": "[作者]",
  "creationDate": "[创建日期]",
  "tags": ["tag1", "tag2", "..."]
}
```

**II. 布局配置**

1. **整体布局模式选择：**  指定卡片采用的整体布局模式。
   - `mode`: ["fixed", "fluid", "responsive"]
   - `direction`: ["horizontal", "vertical"] (仅当 `mode` 为 "fixed" 或 "fluid" 时适用)
2. **卡片尺寸约束：**  定义卡片的最大和最小尺寸，以保证排版紧凑。
   - `maxWidth`: "[最大宽度，例如：300px, 50%]"
   - `maxHeight`: "[最大高度，例如：200px, auto]"
   - `minWidth`: "[最小宽度]"
   - `minHeight`: "[最小高度]"
3. **布局区域定义：**  定义卡片包含的各个布局区域及其属性。
   ```json
   "layoutZones": [
     {
       "name": "header",
       "type": ["fixed-height", "auto-height", "proportional-height"],
       "height": "[像素值或比例]",
       "width": "[像素值或比例]",
       "position": ["top", "bottom", "left", "right"],
       "alignment": ["start", "center", "end", "space-between", "space-around"],
       "padding": "[CSS padding 值，注意使用较小的值以保证紧凑]",
       "margin": "[CSS margin 值，注意使用较小的值]",
       "backgroundColor": "[颜色值]",
       "border": { ...边框属性配置 (见 IV. 视觉样式配置) ... }
     },
     {
       "name": "mainContent",
       "layoutMode": ["flow", "grid", "flex"],
       "gridTemplateColumns": "[CSS grid-template-columns 值]",
       "gridTemplateRows": "[CSS grid-template-rows 值]",
       "gap": "[CSS gap 值，使用较小的值]",
       "flexDirection": ["row", "column"],
       "flexWrap": ["wrap", "nowrap"],
       "justifyContent": ["start", "center", "end", "space-between", "space-around"],
       "alignItems": ["start", "center", "end", "stretch"],
       "backgroundColor": "[颜色值]"
     },
     // ... 其他布局区域定义
   ]
   ```
4. **条件布局规则：**  根据卡片内容或元数据动态应用不同的布局。
   ```json
   "conditionalLayouts": [
     {
       "condition": "data.chartType === 'bar'",
       "layoutZoneModifications": [
         { "targetZone": "mainContent", "layoutMode": "flex", "flexDirection": "column" },
         { "targetZone": "chartArea", "position": "bottom" }
       ]
     }
   ]
   ```

**III. 内容元素配置**

1. **内容元素类型：**  定义卡片中可能包含的各种内容元素类型。
   - 支持的元素类型：`text`, `image`, `icon`, `chart`, `list`, `table`, `button`, `badge`, `separator`
2. **内容元素属性配置：**  为每个内容元素定义其属性和样式。
   ```json
   "contentElements": [
     {
       "id": "cardTitle",
       "type": "text",
       "text": "[主标题文本]",
       "layoutZone": "header",
       "style": { "fontSize": "18px", "fontWeight": "bold", "color": "#333" }
     },
     {
       "id": "mainImage",
       "type": "image",
       "url": "[图片 URL 或 base64 编码]",
       "layoutZone": "imageArea",
       "width": "100%",
       "height": "auto",
       "objectFit": ["contain", "cover", "fill"],
       "altText": "[图片描述]"
     },
     {
       "id": "dataChart",
       "type": "chart",
       "layoutZone": "mainContent",
       "chartType": ["bar", "line", "pie"],
       "data": "[数据源，可以是 JSON 或指向数据的引用]",
       "options": {
         "xAxisLabel": "[X 轴标签]",
         "yAxisLabel": "[Y 轴标签]",
         "colorPalette": ["#ddd", "#eee"]
       }
     }
     // ... 其他内容元素定义
   ]
   ```
3. **内容元素分组与嵌套：**  定义如何将内容元素分组和嵌套在不同的布局区域中。
   ```json
   "contentStructure": [
     { "layoutZone": "header", "elements": ["cardTitle"] },
     { "layoutZone": "mainContent", "elements": ["dataParagraph", "dataChart"] },
     { "layoutZone": "footer", "elements": ["sourceLink", "updateTime"] }
   ]
   ```

**IV. 视觉样式配置**

1. **整体圆角设置：**  定义卡片整体的圆角大小，体现圆润风格。
    ```json
    "borderRadius": "8px"
    ```
2. **颜色主题：**  定义卡片使用的颜色主题。
   ```json
   "colorPalette": {
     "primary": "#007bff",
     "secondary": "#6c757d",
     "background": "#f8f9fa",
     "textPrimary": "#343a40",
     "textSecondary": "#6c757d"
   },
   "themeMode": ["light", "dark"]
   ```
3. **排版样式：**  定义卡片使用的字体、字号、行高等排版样式，注意使用更紧凑的设置。
   ```json
   "typography": {
     "fontFamilyBase": "sans-serif",
     "fontFamilyHeadings": "serif",
     "fontSizeBase": "14px",
     "lineHeightBase": "1.3",
     "fontWeightBase": "400",
     "fontStyles": [
       { "selector": "h1", "fontSize": "1.8em", "fontWeight": "bold" },
       { "selector": "p", "fontSize": "0.9em", "color": "#555" }
     ]
   }
   ```
4. **边框样式配置：**  定义各种边框的样式，同样可以考虑圆角。
   ```json
   "borderStyles": {
     "default": { "width": "1px", "style": "solid", "color": "#ccc", "radius": "6px" },
     "highlight": { "width": "2px", "style": "dashed", "color": "#007bff", "radius": "8px" }
   }
   ```
5. **阴影效果：**  定义卡片及其元素的阴影效果。
   ```json
   "boxShadows": {
     "default": "0 2px 4px rgba(0,0,0,0.1)",
     "large": "0 4px 8px rgba(0,0,0,0.2)"
   }
   ```
6. **渐变效果：**  定义卡片及其元素的渐变效果。
   ```json
   "gradients": {
     "primary": "linear-gradient(to right, #007bff, #00bfff)"
   }
   ```
7. **滤镜效果：**  定义可以应用于卡片及其元素的 SVG 滤镜效果。
   ```json
   "filters": {
     "blur": "blur(5px)",
     "grayscale": "grayscale(100%)"
   }
   ```

**V. 交互与动态效果 (静态 SVG 的模拟)**

虽然目标是静态 SVG，但可以定义一些在交互时可能发生的状态变化，以便在设计时考虑到这些因素。

```json
"interactiveStates": {
  "hover": { "backgroundColor": "#eee", "transform": "scale(1.05)" },
  "active": { "boxShadow": "inset 0 1px 3px rgba(0,0,0,0.2)" }
}
```

**VI. 可访问性配置**

```json
"accessibility": {
  "ariaLabels": {
    "mainImage": "[主图片的 ARIA 标签]",
    "dataChart": "[数据图表的 ARIA 标签]"
  },
  "roleAttributes": {
    "navigation": "navigation",
    "main": "main"
  },
  "tabIndexOrder": ["cardTitle", "mainImage", "dataChart"]
}
```

**VII. 最终生成指令**

请根据以上提供的所有配置信息，包括布局、内容、样式、以及可访问性要求，生成一个符合规范的知识密集型 SVG 卡片。**特别注意卡片整体风格的圆润处理以及内容排版比例的紧凑性。** 输出结果应包含完整的 SVG 代码。请严格遵守 JSON 配置中指定的每一个属性和值。如果配置信息中存在冲突，请优先遵循更具体的配置项。对于未明确指定的属性，可以采用默认值或进行合理的推断。

**请为以下特定场景生成 SVG 卡片 (示例输入：“红军长征的路线” “神经网络原理“ “地月距离”)：**

```json
{
  "cardName": "InformationCard",
  "description": "通用信息展示卡片",
  "version": "1.1",
  "author": "AI Expert",
  "creationDate": "2023-10-27",
  "tags": ["information", "compact", "rounded"],
  "borderRadius": "12px",
  "layoutZones": [
    { "name": "header", "type": "fixed-height", "height": "40px", "backgroundColor": "#e0e0e0", "padding": "5px", "border": { "radius": "10px 10px 0 0" } },
    { "name": "mainContent", "layoutMode": "flow", "padding": "10px" }
  ],
  "contentElements": [
    { "id": "cardTitle", "type": "text", "text": "[根据用户输入填充标题]", "layoutZone": "header", "style": { "fontSize": "16px", "fontWeight": "bold" } },
    { "id": "mainText", "type": "text", "text": "[根据用户输入填充详细信息，力求简洁]", "layoutZone": "mainContent", "style": { "fontSize": "14px", "lineHeight": "1.4" } }
  ],
  "colorPalette": { "primary": "#0088cc", "background": "#f9f9f9" },
  "typography": { "fontSizeBase": "13px", "lineHeightBase": "1.2" }
}
```

**VIII. LLM 注意事项**

- **严格解析 JSON 配置：**  请务必准确解析提供的 JSON 配置，并将其转化为 SVG 元素的属性和样式。
- **优先使用配置值：**  当配置信息中提供了明确的值时，优先使用这些值。
- **合理处理未配置项：**  对于配置中未涉及的属性，可以采用 SVG 的默认值或根据上下文进行合理的推断。
- **输出完整的 SVG 代码：**  最终输出应为可以直接渲染的、完整的 SVG 代码。
- **考虑代码可读性：**  生成的 SVG 代码应具有良好的可读性和结构。
- **确保卡片圆润风格：**  务必将卡片的整体边框以及内部相关元素的边框设置为圆角。
- **实现内容排版紧凑：**  在布局和元素样式设置上，注意减少留白，使内容尽可能紧凑地排列，但仍需保证良好的可读性。请根据示例输入类型 ("红军长征的路线” “神经网络原理“ “地月距离”) 思考如何紧凑地呈现信息。

**请开始生成 SVG 代码。**'''
